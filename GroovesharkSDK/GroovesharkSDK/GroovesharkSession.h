//
//  GroovesharkSession.h
//  GroovesharkSDK
//
//  Created by Daniel Cohen Gindi on 10/14/14.
//  Copyright (c) 2012 danielgindi@gmail.com. All rights reserved.
//
//  https://github.com/danielgindi/grooveshark-objc-sdk
//
//  The MIT License (MIT)
//
//  Copyright (c) 2014 Daniel Cohen Gindi (danielgindi@gmail.com)
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
//

#pragma once

#import <Foundation/Foundation.h>
#import "GroovesharkErrorCode.h"
#import "GroovesharkAlbumInfo.h"
#import "GroovesharkArtistInfo.h"
#import "GroovesharkFavoriteSongInfo.h"
#import "GroovesharkLibrarySongInfo.h"
#import "GroovesharkPlaylistInfo.h"
#import "GroovesharkSongInfo.h"
#import "GroovesharkUserInfo.h"
#import "GroovesharkUserPlaylistInfo.h"

@interface GroovesharkSession : NSObject

@property (nonatomic, strong) NSString *key;
@property (nonatomic, strong) NSString *secret;
@property (nonatomic, strong) NSString *sessionID;
@property (nonatomic, assign) NSTimeInterval requestTimeout;
@property (nonatomic, strong) NSDictionary *defaultCountry;

@property (nonatomic, strong) NSString *loggedUserEmail;
@property (nonatomic, strong) GroovesharkUserInfo *loggedUserInfo;

#pragma mark - Shared

+ (GroovesharkSession *)sharedSession;
+ (void)setSharedSession:(GroovesharkSession *)sharedSession;

#pragma mark - Constructors

/** Simple init function */
- (id)init;

/** Simple init function
 @param key Sets the initial key property
 @param secret Sets the initial secret property
 */
- (id)initWithKey:(NSString *)key secret:(NSString *)secret;

/** Simple init function
 @param key Sets the initial key property
 @param secret Sets the initial secret property
 @param sessionID Sets the initial sessionID property
 */
- (id)initWithKey:(NSString *)key secret:(NSString *)secret sessionID:(NSString *)sessionID;

/** Convenience constructor
 @param key Sets the initial key property
 @param secret Sets the initial secret property
 */
+ (instancetype)sessionWithKey:(NSString *)key secret:(NSString *)secret;

/** Convenience constructor
 @param key Sets the initial key property
 @param secret Sets the initial secret property
 @param sessionID Sets the initial sessionID property
 */
+ (instancetype)sessionWithKey:(NSString *)key secret:(NSString *)secret sessionID:(NSString *)sessionID;

#pragma mark - Session

/** Useful for testing if the service is up.
 @param completion Block to be called on completion
 */
- (void)pingServiceWithCompletion:(void(^)(BOOL success))completion;

/** Start a session
 @param completion Block to be called on completion
 */
- (void)startSessionWithCompletion:(void(^)(BOOL success, NSError *error))completion;

/** Logout the user on the current session
 @param completion Block to be called on completion
 */
- (void)logoutWithCompletion:(void(^)(BOOL success, NSError *error))completion;

/** Authenticate a user on the current session, using the supplied username/password.
 The login details are only sent over HTTPS.
 @param username Plain username
 @param password Plain password
 @param completion Block to be called on completion
 */
- (void)authenticateWithUsername:(NSString *)username password:(NSString *)password completion:(void(^)(BOOL success, NSString *email, GroovesharkUserInfo *userInfo, NSError *error))completion;

/** Authenticate a user on the current session, using the supplied token.
 The login details are only sent over HTTPS.
 @param token A token generated by a previous OAuth login
 @param completion Block to be called on completion
 */
- (void)authenticateWithToken:(NSString *)token completion:(void(^)(BOOL success, NSString *email, GroovesharkUserInfo *userInfo, NSError *error))completion;

#pragma mark - Country

/** Fetch the country info for the specified IP address. 
 The country data is a special format stored in an NSDictionary. It should be passed as-is to functions that require it.
 @param ip The IP we are interested in
 @param completion Block to be called on completion
 */
- (void)getCountryForIP:(NSString *)ip completion:(void (^)(NSDictionary *country, NSError *error))completion;

/** Fetch the country info for the current IP address.
 We try to detect the iPhones IP address, and if we can't - we will use a dummy address.
 The country data is a special format stored in an NSDictionary. It should be passed as-is to functions that require it.
 @param ip The IP we are interested in
 @param completion Block to be called on completion
 */
- (void)getCountryForCurrentIPWithCompletion:(void (^)(NSDictionary *country, NSError *error))completion;

#pragma mark - User

/** Fetch the info of the authenticated user
 @param completion Block to be called on completion
 */
- (void)getUserInfoWithCompletion:(void (^)(GroovesharkUserInfo *userInfo, NSError *error))completion;

/** Fetch the info of the specified user
 @param userID The user we are interested in
 @param completion Block to be called on completion
 */
- (void)getUserInfoForUser:(int64_t)userID completion:(void (^)(GroovesharkUserInfo *userInfo, NSError *error))completion;

#pragma mark - Songs

/** Fetch the songs in the library of the authenticated user.
 Each song returned is an instance of GroovesharkLibrarySongInfo.
 @param limit Limit the results size. Specify 0 for no limit.
 @param page Page the index of the results page to return, 0-based.
 @param completion Block to be called on completion
 */
- (void)getUserLibrarySongsWithLimit:(NSInteger)limit
                                page:(NSInteger)page
                          completion:(void (^)(NSArray *songs, BOOL hasMore, NSInteger maxSongs, NSDate *libraryModified, NSError *error))completion;

/** Get a Grooveshark URL for the given song.
 * Requires special access.
 @param songID ID of the song we are interested in
 @param completion Block to be called on completion
 */
- (void)getSongURLFromSongID:(int64_t)songID completion:(void(^)(NSString *url, NSError *error))completion;

/** Get info for a list of songs
 Each song returned is an instance of GroovesharkSongInfo.
 @param songIDs Array of IDs of the songs we are interested in
 @param completion Block to be called on completion
 */
- (void)getSongsInfoForSongIDs:(NSArray *)songIDs completion:(void(^)(NSDictionary *songs, NSError *error))completion;

/** Get info of a specific song
 @param songID ID of the song we are interested in
 @param completion Block to be called on completion
 */
- (void)getSongInfoForSongID:(int64_t)songID completion:(void(^)(GroovesharkSongInfo *songInfo, NSError *error))completion;

/** Does this song exist?
 @param songID ID of the song we are interested in
 @param completion Block to be called on completion
 */
- (void)getDoesSongExist:(int64_t)songID completion:(void(^)(BOOL exists, NSError *error))completion;

/** Search for songs by name.
 Each song returned is an instance of GroovesharkSongInfo.
 @param query Keywords for song name.
 @param country Country as returned from getCountry. This is required, and will try to use the `defaultCountry` property if nil;
 @param limit Limit the results size. Specify 0 for no limit.
 @param offset Offset the results. Specify 0 for no offset.
 @param completion Block to be called on completion
 */
- (void)getSongSearchResultsByQuery:(NSString *)query
                            country:(NSDictionary *)country
                              limit:(NSInteger)limit
                             offset:(NSInteger)offset
                         completion:(void (^)(NSArray *songs, NSError *error))completion;

#pragma mark - Artists

/** Get info for a list of artists
 Each artist returned is an instance of GroovesharkArtistInfo.
 @param artistIDs Array of IDs of the artists we are interested in
 @param completion Block to be called on completion
 */
- (void)getArtistsInfoForArtistIDs:(NSArray *)artistIDs completion:(void(^)(NSDictionary *artists, NSError *error))completion;

/** Get info of a specific artist
 @param artistID ID of the artist we are interested in
 @param completion Block to be called on completion
 */
- (void)getArtistInfoForArtistID:(int64_t)artistID completion:(void(^)(GroovesharkArtistInfo *artistInfo, NSError *error))completion;

/** Does this artist exist?
 @param songID ID of the song we are interested in
 @param completion Block to be called on completion
 */
- (void)getDoesArtistExist:(int64_t)artistID completion:(void(^)(BOOL exists, NSError *error))completion;

/** Search for artists by name.
 Each artist returned is an instance of GroovesharkArtistInfo.
 * This method is access controlled.
 @param query Keywords for artist name.
 @param limit Limit the results size. Specify 0 for no limit.
 @param completion Block to be called on completion
 */
- (void)getArtistSearchResultsByQuery:(NSString *)query
                                limit:(NSInteger)limit
                           completion:(void (^)(NSArray *artists, BOOL hasPrevPage, BOOL hasNextPage, NSInteger pageCount, NSError *error))completion;

#pragma mark - Albums

/** Get info for a list of albums
 Each album returned is an instance of GroovesharkAlbumInfo.
 @param albumIDs Array of IDs of the albums we are interested in
 @param completion Block to be called on completion
 */
- (void)getAlbumsInfoForAlbumIDs:(NSArray *)albumIDs completion:(void(^)(NSDictionary *albums, NSError *error))completion;

/** Get info of a specific album
 @param albumID ID of the album we are interested in
 @param completion Block to be called on completion
 */
- (void)getAlbumInfoForAlbumID:(int64_t)albumID completion:(void(^)(GroovesharkAlbumInfo *albumInfo, NSError *error))completion;

/** Does this album exist?
 @param songID ID of the song we are interested in
 @param completion Block to be called on completion
 */
- (void)getDoesAlbumExist:(int64_t)albumID completion:(void(^)(BOOL exists, NSError *error))completion;

/** Search for albums by name.
 Each album returned is an instance of GroovesharkAlbumInfo.
 * This method is access controlled.
 @param query Keywords for album name.
 @param limit Limit the results size. Specify 0 for no limit.
 @param completion Block to be called on completion
 */
- (void)getAlbumSearchResultsByQuery:(NSString *)query
                               limit:(NSInteger)limit
                          completion:(void (^)(NSArray *albums, BOOL hasPrevPage, BOOL hasNextPage, NSInteger pageCount, NSError *error))completion;

#pragma mark - Favorites

/** Fetch the songs in the favorites of the authenticated user.
 Each song returned is an instance of GroovesharkFavoriteSongInfo.
 @param limit Limit the results size. Specify 0 for no limit.
 @param completion Block to be called on completion
 */
- (void)getUserFavoriteSongsWithLimit:(NSInteger)limit completion:(void (^)(NSArray *songs, NSError *error))completion;

/** Add a song to the favorites of the authenticated user
 @param songID ID of the song to add
 @param completion Block to be called on completion
 */
- (void)addUserFavoriteSong:(int64_t)songID completion:(void(^)(BOOL success, NSError *error))completion;

/** Remove a song from the favorites of the authenticated user
 @param songID ID of the song to remove
 @param completion Block to be called on completion
 */
- (void)removeUserFavoriteSong:(int64_t)songID completion:(void(^)(BOOL success, NSError *error))completion;

/** Remove a set of songs from the favorites of the authenticated user
 @param songIDs Array of IDs of the songs we are interested in
 @param completion Block to be called on completion
 */
- (void)removeUserFavoriteSongIDs:(NSArray *)songIDs completion:(void(^)(BOOL success, NSError *error))completion;

#pragma mark - Playlists

/** Search for playlists by name.
 Each playlist returned is an instance of GroovesharkUserPlaylistInfo.
 * This method is access controlled.
 @param query Keywords for playlist name.
 @param limit Limit the results size. Specify 0 for no limit.
 @param completion Block to be called on completion
 */
- (void)getPlaylistSearchResultsByQuery:(NSString *)query
                                  limit:(NSInteger)limit
                             completion:(void (^)(NSArray *playlists, BOOL hasPrevPage, BOOL hasNextPage, NSInteger pageCount, NSError *error))completion;

/** Fetch the playlists of the authenticated user.
 Each playlist returned is an instance of GroovesharkPlaylistInfo.
 @param limit Limit the results size. Specify 0 for no limit.
 @param completion Block to be called on completion
 */
- (void)getUserPlaylistsWithLimit:(NSInteger)limit completion:(void (^)(NSArray *playlists, NSError *error))completion;

/** Fetch the playlists of the specified user.
 Each playlist returned is an instance of GroovesharkPlaylistInfo.
 @param userID The user we are interested in
 @param limit Limit the results size. Specify 0 for no limit.
 @param completion Block to be called on completion
 */
- (void)getUserPlaylistsForUser:(int64_t)userID
                          limit:(NSInteger)limit
                     completion:(void (^)(NSArray *playlists, NSError *error))completion;

#pragma mark - Streaming

/** Request a stream URL for a specific SongID
 * This method is access controlled.
 @param songID ID of the song we are interested in
 @param lowBitrate Should we request a low bitrate stream
 @param country Country as returned from getCountry. This is required, and will try to use the `defaultCountry` property if nil;
 @param completion Block to be called on completion
 */
- (void)getStreamURLForSongID:(int64_t)songID
                   lowBitrate:(BOOL)lowBitrate
                      country:(NSDictionary *)country
                   completion:(void (^)(NSString *url, NSString *streamKey, int64_t streamServerId, NSTimeInterval duration, NSError *error))completion;

/** Request a stream URL for a specific SongID, for a subscriber
 * This method is access controlled.
 @param songID ID of the song we are interested in
 @param lowBitrate Should we request a low bitrate stream
 @param uniqueTrialID A trial ID. If nil - will assume that the authenticated user is an Anywhere user.
 @param country Country as returned from getCountry. This is required, and will try to use the `defaultCountry` property if nil;
 @param completion Block to be called on completion
 */
- (void)getSubscriberStreamURLForSongID:(int64_t)songID
                      subscriberTrialID:(NSNumber *)uniqueTrialID
                             lowBitrate:(BOOL)lowBitrate
                                country:(NSDictionary *)country
                             completion:(void (^)(NSString *url, NSString *streamKey, int64_t streamServerId, NSTimeInterval duration, NSError *error))completion;

/** Request a stream URL for a specific SongID, for a subscriber
 * This method is access controlled.
 @param songID ID of the song we are interested in
 @param lowBitrate Should we request a low bitrate stream
 @param country Country as returned from getCountry. This is required, and will try to use the `defaultCountry` property if nil;
 @param completion Block to be called on completion
 */
- (void)getSubscriberStreamURLForSongID:(int64_t)songID
                             lowBitrate:(BOOL)lowBitrate
                                country:(NSDictionary *)country
                             completion:(void (^)(NSString *url, NSString *streamKey, int64_t streamServerId, NSTimeInterval duration, NSError *error))completion;

/** Mark an existing streamKey as being played for >30 seconds
 * This should be called after 30 seconds of listening, not just at the 30 seconds mark. This means we actually call this at the 31 seconds mark.
 @param streamKey Stream key of the song being played
 @param streamServerID Server ID of the stream being played
 @param completion Block to be called on completion
 */
- (void)markStreamKeyOver30Seconds:(NSString *)streamKey
                  onStreamServerID:(int64_t)streamServerID
                        completion:(void (^)(BOOL success, NSError *error))completion;

/** Marks an song stream as completed.
 * Complete is defined as: Played for greater than or equal to 30 seconds, and having reached the last second either through seeking or normal playback.
 @param songID ID of the song being played
 @param streamKey Stream key of the song being played
 @param streamServerID Server ID of the stream being played
 @param completion Block to be called on completion
 */
- (void)markStreamKey:(NSString *)streamKey
donePlayingWithSongID:(int64_t)songID
     onStreamServerID:(int64_t)streamServerID
           completion:(void (^)(BOOL success, NSError *error))completion;

#pragma mark - Generic

/** Used internally to generate the "sig" argument for the request, using the current secret
 @param requestData The data for which we deserve to generate a signature
 */
- (NSString *)signatureForRequestData:(NSData *)requestData;

/** Make an arbitrary call to the Grooveshark API
 @param functionName The name of the function to call
 @param https Should we issue the call over HTTPS?
 @param completion Block to be called on completion, with the result
 */
- (void)callApiFunction:(NSString *)functionName
         withParameters:(NSDictionary *)parameters
                  https:(BOOL)https
             completion:(void(^)(id result, NSError *error))completion;

/** Returns an NSDateFormatter that's good for Grooveshark timestamps
 @return The NSDateFormatter NSDate
 */
+ (NSDateFormatter *)dateFormatterForGroovesharkTimestamp;

/** Convert a Grooveshark timestamp to an NSDate
 @param timestamp The timestamp to convert
 @return The correct NSDate
 */
+ (NSDate *)dateFromGroovesharkTimestamp:(NSString *)timestamp;

#pragma mark - Utilities

/** Utility function to determine that current IP address
 @return The IP address or nil if couldn't figure out.
 */
+ (NSString *)currentIPAddress;

#pragma mark - Images

+ (NSString *)urlForArtistImageNamed:(NSString *)imageName minWidth:(int)minWidth maxWidth:(int)maxWidth;

+ (NSString *)urlForAlbumImageNamed:(NSString *)imageName minWidth:(int)minWidth maxWidth:(int)maxWidth;

+ (NSString *)urlForPlaylistImageNamed:(NSString *)imageName minWidth:(int)minWidth maxWidth:(int)maxWidth;

@end
